       	       	     +-------------------------+
                     |          CS 124         |
                     | PROJECT 6: FILE SYSTEMS |
                     |     DESIGN DOCUMENT     |
                     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Rahul Bachal <rbachal@caltech.edu>
Robert Eng   <reng@caltech.edu>
David Qu     <dqu@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  
3

>> What is the Git repository and commit hash for your submission?

   Repository URL: login.cms.caltech.edu:/cs/courses/cs124/teams/waffle.git
                   https://github.com/waffleOS/waffle.git
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

---- LOGISTICS ----
>> L1: Hours spent
Rahul: 54
Robert: 65
David: 38

>> L2: Focus
Rahul: Implemented file extension. Wrote algorithm to find sectors given byte
       offsets for files, create files, and extend files. Rewrote all inode
       functions to use new file inode structure. Debugged inode structure
       extensively and worked with cache code to determine issues.
       Fixed bugs in cache eviction.
       Helped implement subdirectories. Debugged and fixed code.
Robert:Implemented cache design. Wrote NFU eviction policy with Random
	   Replacement. Implemented subdirectories. Helped brainstorm ideas
	   for the inode structure including a really awesome B tree with Rahul.
	   Did a whole lot of debugging.
David: Implemented read write lock, and refactored cache API to use the
       read write lock by supplying synchronized cache_read_sector and
       cache_write_sector functions. Helped discuss implementation and
       design strategies for file extension and sub directories.
       
		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
NUM_DIRECT = 122
NUM_INDIRECT = 1
NUM_DOUBLE_INDIRECT = 1
NUM_BYTES_PER_SECTOR = 512
NUM_SECTORS = 128

size = NUM_DIRECT * NUM_BYTES_PER_SECTOR + NUM_INDIRECT * NUM_SECTORS *
       NUM_BYTES_PER_SECTOR + NUM_DOUBLE_INDIRECT * NUM_SECTORS * NUM_SECTORS
       * NUM_BYTES_PER_SECTOR
     = 8516608 bytes
     = 8.122 MB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
Our inode structure is a multilevel index. We have 122 direct blocks, 1 indirect
block, and 1 double indirect block. This allows us to have files at most 8 MB.
Using only 1 indirect and 1 double indirect block makes the math for the
different inode functions easier.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- Added struct dir * parent to struct dir so directories could keep track
  of their parents and .. would work.
- Added struct dir *curdir to struct thread so threads could know where
  they were in the filesystem.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

To figure out if it's absolute or relative, we check if the first
character is a '/'. Then we set the temporary directory accordingly where
absolute corresponds with teh root and relative corresponds with
setting it to the current thread's directory.
It begins by parsing for all the '/' and keeps an array of all pointers
to these '/'. Then we split up the string and traverse through the 
directory tree by changing a temporary directory. All '/' are truncated
off the end. The last piece of string after the last '/' is dealt with
according to the function.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We have a readwrite lock on the cache. We unfortunately did not
implement directory locks.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

All in cache_sector in cache.c
- block_sector_t block_id         /* Sector index contained in cache */
- bool used                       /* Has this sector been used yet */
- bool dirty                      /* Has this sector been written to */
- bool accessed                   /* Has this sector been accessed recently */
- struct rw_lock rw               /* Synchronizes reads and writes. */
- uint8_t data[BLOCK_SECTOR_SIZE] /* Holds up to BLOCK_SECTOR_SIZE bytes */

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

To get rid of thrashing on teh first index, we first do a random
replacement policy and randomly choose an index to default evict.
Next, we do a Not Frequently Used (NFU) policy where we keep track
of the indeces which haven't been accessed a lot. This is done with
access flags in each index which are set to true when an index is
accessed. After a certain number of accesses over the entire cache,
cache_refresh is called and sets all accesses to false and increments
a counter on each of the indeces. After a certain number of refreshes,
the accesses will decay so something accessed a lot a long time ago
won't stay in teh cache. Thus when something needs to be evicted, it will
choose the index with the fewest number of these increments.

>> C3: Describe your implementation of write-behind.

When something is written, it will get pulled up from disk memory or
found in the cache, at which point it's written to the cache and the
dirty flag on teh cache is set to true.
When that index is evicted in cache_evict or a cache_write_all_dirty
is called, the cache indeces are written back to the disk.
As of now, it isn't on a new thread as we had hoped (we ran out of
time). It currently resides in the cache_refresh function where it
takes writes all dirty indeces back to the disk.

>> C4: Describe your implementation of read-ahead.

We have a TODO stub. :( We were planning on putting this in inode_read_at
and it would spawn a new thread to read in the next block. We priortized
getting the subdirectories to work and cache bugs out before this.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?
The eviction policy acquires the rw_lock with the intention to write.
This forces it to wait for any current readers or writers to finish
before it acquires the lock. The rw_lock prioritizes writers when
a reader is reading and readers when a writer is writing. This way
it is fair.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?
The write access rw_lock prevents others from accessing the block
until after the eviction is done.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Workloads where you work with a chunk of files which is larger than
your RAM will benefit from the cache so you don't have to constantly read
junk from disk memory which takes a long time and thus is a pain. Thus
you can keep data you access a lot in the cache and reduce the time
it takes to bring it up from memory.
Read-ahead benefits workloads where you are reading things sequentially.
Write-behind benefits from workloads where you are writing to the same
chunk of memory over and over again. Since writing takes a while,
if you write back later all at once, it will save time.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
This assignment was pretty difficult, especially since it was during finals
week. We all left to go home and did the majority of work remotely. We were
not able to get persistence to work even though most of the tests worked.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
My brain hurts.
