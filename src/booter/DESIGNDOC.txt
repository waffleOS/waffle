			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Rahul Bachal <rbachal@caltech.edu>
Robert Eng <reng@caltech.edu>
David Qu <dqu@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 0.

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: /cs/courses/cs124/teams/waffle.git
                   https://github.com/waffleOS/waffle
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

   Rahul:
   Robert:
   David: 10 hours

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Rahul: Video, keyboard, interrupt handlers, game keys
Robert:
David: Bootloader, debugging interrupts, basic collision physics/ball movement.

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?
It steps up the stack, loads the C program, enters protected mode,
and then calls the c_start() entry point to get the game started.

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?
The game is Pong. 2 players control vertical paddles that bounce a ball
back and forth like in ping-pong. Player 0 can move the left paddle up and
down with E and D while Player 1 can move the right paddle with I and K.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.
The game.h file contains the global variables for the game. The interrupt
handlers interface with these variables using the mutator functions
defined. The Player struct tracks the score and paddle position
for each player, and the Ball struct tracks the ball's x/y position and
x/y velocity. Game.c initializes these global variables and keeps
printing the score in an infinite loop (so the ball doesn't erase it).

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?
When a timer interrupt occurs, the game advances one time step, and then
updates the player states, the ball state, and handles any collisions.
When a keyboard interrupt happens, a keycode is buffered into a queue,
which is processed in the game loop.

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?
The program polls to print the score, so it is not erased when the ball
passes through. Ultimately, there must be a game loop that is just jumping
and waiting for interrupts, so we simply add a task to do during this time.

---- RATIONALE ----

>> A6: Why did you choose the project you did?
It was a fun, but relatively simple multiplayer game to implement.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)
The physics of the game encouraged us to use the timer to update time steps
in the game.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?
No.

			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?
The DAP was stored on the stack. The memory was not reclaimed because
it was only 16 bytes and the stack has plenty of space (there's no
heap to run into).

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?
No.

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?
It uses the extended read sector system call to read 512 byte sectors.

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)
No.

			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)

We use

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.

Our video code maintains the background color so that when we set a pixel, we
can set the background color. The video data is stored in a buffer.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

We have the following APIs:
    init_video - initializes all data structures and video
    setPixel - Sets a pixel at a given location with a foreground color and a
               char value.
    clearForeground  - Clears the foreground of the screen.
    getBackground - Gets the background color.
    setBackground - Sets the background color and draws the screen.
    clearPixel - Clears the foreground of a pixel at a location.
    printString - Prints a string at a given location.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?

The ball in pong is represented by a different color than the paddles.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
It simply calls stepGame(), which updates the state of the Players and the
Ball after one step. This is part of the game.h API.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
It provides the init_timer() function to set up the handler and set the
clock defaults. The timer uses the game.h API to interface with the game.

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?
The interrupt rate was left at 100Hz, but a clock counter was used to scale
speeds as needed, so the ball could move at different velocities.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?
There is the potential for the timer update to happen before a keycode can
be processed. In this case, the user will not move in time to block the
ball. Since this merely increases the difficulty of the game, it is left
as a feature. There is no game breaking critical code in the timer.

			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

The keyboard subsystem maintains a circular queue with a defined queue size. The
queue contains an array of char values, indices for the head and tail of the
queue, and booleans representing if the queue is full or empty. When the
keyboard interrupt handler runs, it receives the scan-code from the keyboard
port and enqueues the scan-code in the queue.

>> E2: How do your data structures handle keys with multi-byte scan-codes?
The keyboard subsystem does not distinguish between keys with multi-byte scan-codes.
All of the bytes are enqueued separately.

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The keyboard code presents a dequeue function that returns the first scan-code
in the keyboard queue. This allows key-codes to be buffered if the program does
not read the keyboard quickly.

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.

The keyboard subsystem exposes scan-codes directly to the main program. We
define some scan-codes that are needed for game control and use those to
change the game.

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?
