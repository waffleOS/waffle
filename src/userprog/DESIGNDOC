                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Rahul Bachal <rbachal@caltech.edu>
Robert Eng <reng@caltech.edu>
David Qu <dqu@caltech.edu>

>> Specify how many late tokens you are using on this assignment:
1

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: login.cms.caltech.edu:/cs/course/cs124/teams/waffle.git
                   https://github.com/waffleOS/waffle.git
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
    The tests only pass with BOCHS rather than QEMOS.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			   USER PROGRAMS
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
   Rahul:  41 hours
   Robert: 25 hours
   David:  31 hours

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
   
   Rahul: Implemented most of the system calls, interfaced with filesystem
       and debugged various system call tests.
   Robert: Implemented and debugged process_wait, which was used for
       the wait system call.
   David: Implemented/debugged argument passing and helped implement 
       process_wait. Debugged many of the tests.
   
                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
    None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
    The strings to push are added in reverse character order by
    first iterating through the string once to determine the length.
    A limit of 100 arguments is imposed.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
    strtok_r is reentrant, which is important since the kernel
    threads get prempted by the scheduler. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
    1. Allows the shell to pipe commands because the shell can pass arguments 
       to programs.
    2. It is simplier kernel code because less parsing needs to be done, making
       the kernel easier to debug and maintain.
    3. Makes it easier to protect the kernel from argument passing security violations
       because it can treat the arguments as user space pointers and check the
       address space.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
    Modified struct thread (thread.h)
        Added struct file * files[NUM_FILES] to keep track of open files
        Added struct file * thread_file to keep track of the execution file
        for the thread
    Added struct semaphore file_sem (syscall.h)
        To lock and unlock file system calls
    Added struct semaphore exec_sem (syscall.h)
        To synchronize executing new processes
    Added struct lock exec_lock (syscall.h)
        To synchronize executing new processes
    Added struct condition exec_cond (syscall.h)
        To synchronize executing new processes
    Added bool load_success (syscall.h)
        To determine whether a file is loaded properly or if there is an error
        such as file not existing
    Added struct semaphore filesys_sem (filesys.h)
        To lock and unlock file system calls


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
    File descriptors are unique within a single process. When a file is
    sucessfully opened, a new file descriptor is created. This is done by
    iterating through an array of open files for the current process and
    returning the first index that has a NULL entry. This allows us to
    close files without creating fragmentation in the array and guarantees
    that the file descriptor is unused.
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
    Reading user data is handled with validate_pointer and sanitize_buffer
    wrapper calls, and is processed mainly in the system call handler .
    Writing user data occurs in the stack building phase, where the 
    arguments are written in user pages.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
    The wait system call busy waits the thread until the child signals
    that it has terminated by adding itself to the parent's dead list.
    It manages resource collection after process termination. Exit
    statuses are kept by the parent after child termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
    Our approach involved using validate_pointer and sanitize_buffer
    and having if statements for each case. We did not have time
    to design a better abstraction layer to manage all the possible
    exits and simply added statements ad hoc as needed. This makes
    it difficult to determine we are leaking any resource or 
    missing any edge cases. In terms of locks for the file system,
    we eventually added some semaphore statements to some of the
    calls, but should have done this at the beginning to avoid
    having to write them everywhere.
    We tried to avoid dynamically allocated resources where possible.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
Attempted/commented out implementation:
    In this submission of the code, there are bugs when loading 
    the new executable fails. 
    We tried to use a lock, and cond_wait with a cond to have the
    parent wait until its child can determine if the load. We
    were able to create one version of the code where exec-missing
    passed. However, this caused a deadlock situation for multi-child 
    and rox-multi tests, which caused them to fail. Thus, we have commented 
    out our lock implementation because the two tests are worth more
    than the exec-missing test.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Attempted/Commented out implementation:
    As mentioned above, we have a solution using lock and cond_wait
    to wait for the child to finish loading and catch any errors in
    the case when P calls wait(C) before C exits.

Actual Implementation:
    Each parent has a list of dead children that each child adds itself
    to when it exits. The child doesn't free its resources and instead
    depends on its parent to do so. If P terminates without waiting,
    there is an issue. The current implemention is non-ideal in that 
    it allows for zombie children, but this is how UNIX is implemented.
    If P terminates after C exits, P simply cleans up C.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
    We have valid_pointer and sanitize_buffer helper functions that
    check whether the pointers are in user space, and coming from
    proper page table entries. This allows us to protect against
    security violations such as the ones in the tests.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
    The advantages to our design for file descriptors are that each process
    can maintain its own set of open files without any knowledge of other
    processes. The value of the file descriptor is not dependent on the number
    of other threads.
    The disadvantages to this design are that two different processes cannot
    use the same file descriptor to mean the same file. This also adds an
    additional overhead in the system calls for the file system as the file
    descriptors have to be managed in the current thread.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
    We kept the identity mapping.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
    Working on the system calls for the file system gave us greater insight
    into how file descriptors and files work on OSes, although we will see
    more in the file systems project.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?
    Nope.
